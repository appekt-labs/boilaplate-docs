import{_ as t}from"./chunks/landing-page.BTSF-HMI.js";import{_ as a,c as o,a0 as s,o as r}from"./chunks/framework.XulkbXWZ.js";const i="/assets/signin.Dtz_eQww.png",n="/assets/register.X-jXdruB.png",g="/assets/forgot-password.ARxMejGk.png",l="/assets/reset-password.lbv29V9l.png",d="/assets/dashboard.DswMaqhp.png",p="/assets/cloudinary-upload.gkOX4mTn.png",u="/assets/waitlist-page.BmEVmxaq.png",_=JSON.parse('{"title":"Pages Overview","description":"","frontmatter":{},"headers":[],"relativePath":"pages-overview.md","filePath":"pages-overview.md"}'),h={name:"pages-overview.md"};function c(m,e,f,w,b,v){return r(),o("div",null,e[0]||(e[0]=[s('<h1 id="pages-overview" tabindex="-1">Pages Overview <a class="header-anchor" href="#pages-overview" aria-label="Permalink to &quot;Pages Overview&quot;">​</a></h1><p>The Next.js boilerplate comes equipped with essential authentication pages, dashboard views, and a landing page to help you kickstart your project quickly. Each page is pre-configured with a clean UI, responsive layout, and ready-to-use functionality, saving you valuable time on development.</p><p>Below is an overview of all the key pages included in <strong>BoilaPlate</strong>.</p><hr><h2 id="_1-sign-in-page-auth-signin" tabindex="-1">1. Sign In Page (<code>/auth/signin</code>) <a class="header-anchor" href="#_1-sign-in-page-auth-signin" aria-label="Permalink to &quot;1. Sign In Page (`/auth/signin`)&quot;">​</a></h2><p>The <strong>Sign In</strong> page provides a simple and secure authentication process for users. It integrates with <strong>NextAuth</strong> for easy user management and email/password authentication.</p><ul><li><strong>Route</strong>: <code>/auth/signin</code></li><li><strong>Components</strong>: Sign-in form with fields for email and password.</li><li><strong>Additional Info</strong>: Utilizes secure NextAuth session handling.</li></ul><p>This page alone saves you several hours of development time because it’s already set up to connect with authentication services and handle validation.</p><p><img src="'+i+'" alt="Signin Page"></p><hr><h2 id="_2-register-page-auth-register" tabindex="-1">2. Register Page (<code>/auth/register</code>) <a class="header-anchor" href="#_2-register-page-auth-register" aria-label="Permalink to &quot;2. Register Page (`/auth/register`)&quot;">​</a></h2><p>While <strong>NextAuth</strong> doesn&#39;t offer a registration feature out of the box, <strong>BoilaPlate</strong> includes a fully functional <strong>Register</strong> page. This page allows users to create new accounts using a custom route (<code>/api/auth/register</code>), which processes new user registrations.</p><ul><li><strong>Route</strong>: <code>/auth/register</code></li><li><strong>Components</strong>: Registration form with fields for email, password, and confirmation password.</li><li><strong>Additional Info</strong>: Secure account creation, easy integration with database.</li></ul><p>The registration page is already configured to store user data in <strong>MongoDB</strong>, saving you at least 5 hours of backend setup.</p><p><img src="'+n+'" alt="Register Page"></p><hr><h2 id="_3-forgot-password-page-auth-forgot-password" tabindex="-1">3. Forgot Password Page (<code>/auth/forgot-password</code>) <a class="header-anchor" href="#_3-forgot-password-page-auth-forgot-password" aria-label="Permalink to &quot;3. Forgot Password Page (`/auth/forgot-password`)&quot;">​</a></h2><p>The <strong>Forgot Password</strong> page allows users to reset their password by sending an email to their registered address. It’s integrated with the <strong>Resend</strong> service, using <strong>@react-email/components</strong> to handle beautifully styled email templates.</p><ul><li><strong>Route</strong>: <code>/auth/forgot-password</code></li><li><strong>Components</strong>: Email input field, submit button to request password reset.</li><li><strong>Additional Info</strong>: Connects to API to send reset emails using Resend and React Email.</li></ul><p>This feature is already integrated into the backend logic, saving you 3-4 hours of development time.</p><p><img src="'+g+'" alt="Forgot Password Page"></p><hr><h2 id="_4-reset-password-page-auth-reset-password" tabindex="-1">4. Reset Password Page (<code>/auth/reset-password</code>) <a class="header-anchor" href="#_4-reset-password-page-auth-reset-password" aria-label="Permalink to &quot;4. Reset Password Page (`/auth/reset-password`)&quot;">​</a></h2><p>The <strong>Reset Password</strong> page allows users to securely update their passwords after verifying their identity via email. It’s linked to the token-based reset system, ensuring secure operations.</p><ul><li><strong>Route</strong>: <code>/auth/reset-password</code></li><li><strong>Components</strong>: Password input fields (new password and confirmation password).</li><li><strong>Additional Info</strong>: This page ensures user verification before allowing password changes.</li></ul><p>The backend logic of password resets can often take several hours to implement, but <strong>BoilaPlate</strong> handles it for you right out of the box.</p><p><img src="'+l+'" alt="Reset Password Page"></p><hr><h2 id="_5-dashboard-page-dashboard" tabindex="-1">5. Dashboard Page (<code>/dashboard</code>) <a class="header-anchor" href="#_5-dashboard-page-dashboard" aria-label="Permalink to &quot;5. Dashboard Page (`/dashboard`)&quot;">​</a></h2><p>The <strong>Dashboard</strong> page provides users with an overview of their account. The page includes:</p><ul><li>A simple <strong>logout button</strong> to allow users to sign out securely.</li><li><strong>Navigation links</strong> for profile management and other dashboard pages.</li><li>A <strong>Premium badge</strong> to highlight users who have upgraded.</li><li>A <strong>Upgrade to Premium</strong> button for users to purchase premium access (integrated with <strong>Lemon Squeezy</strong>).</li></ul><p>While the dashboard is basic, it sets up the foundational layout for a more advanced system. You can easily build on top of this for customized user experiences.</p><ul><li><strong>Route</strong>: <code>/dashboard</code></li><li><strong>Components</strong>: Navigation, logout button, premium badge.</li></ul><p>This dashboard layout alone can save you 4-5 hours of work, providing a base UI that developers can expand upon.</p><p><img src="'+d+'" alt="Dashboard Page"></p><hr><h2 id="_6-profile-page-dashboard-profile" tabindex="-1">6. Profile Page (<code>/dashboard/profile</code>) <a class="header-anchor" href="#_6-profile-page-dashboard-profile" aria-label="Permalink to &quot;6. Profile Page (`/dashboard/profile`)&quot;">​</a></h2><p>The <strong>Profile</strong> page enables users to update their account information, such as email, name, and profile picture.</p><ul><li><strong>Route</strong>: <code>/dashboard/profile</code></li><li><strong>Components</strong>: Editable form for updating user details (email, name, profile picture).</li><li><strong>Additional Info</strong>: Data is securely updated in the database.</li></ul><p>This page saves you from setting up user profile management from scratch, typically a 3-4 hour task.</p><p><img src="'+p+'" alt="Profile Page"></p><hr><h2 id="_7-home-landing-page" tabindex="-1">7. Home (Landing Page) <a class="header-anchor" href="#_7-home-landing-page" aria-label="Permalink to &quot;7. Home (Landing Page)&quot;">​</a></h2><p>The <strong>Home</strong> page serves as the <strong>Landing Page</strong> for your web application. It&#39;s a beautifully designed page with sections for <strong>features</strong>, <strong>testimonials</strong>, and <strong>call-to-action</strong> buttons for new users to register or learn more.</p><ul><li><strong>Route</strong>: <code>/</code></li><li><strong>Components</strong>: Hero section, feature highlights, call-to-action buttons.</li><li><strong>Additional Info</strong>: This page is highly customizable for your product or service.</li></ul><p>Having a ready-made, responsive landing page saves you significant time—up to 10 hours—allowing you to focus on customization rather than starting from scratch.</p><p><img src="'+t+'" alt="Home Page"></p><hr><h2 id="_8-waitlist-page-wait-list" tabindex="-1">8. Waitlist Page (<code>/wait-list</code>) <a class="header-anchor" href="#_8-waitlist-page-wait-list" aria-label="Permalink to &quot;8. Waitlist Page (`/wait-list`)&quot;">​</a></h2><p>The <strong>Waitlist</strong> page is designed to capture potential users’ emails, allowing them to sign up for your service when it becomes available.</p><ul><li><strong>Route</strong>: <code>/wait-list</code></li><li><strong>Components</strong>: Email input field, submit button.</li><li><strong>Additional Info</strong>: Stores waitlist information in the database, ready for future use.</li></ul><p>Having a waitlist page in your app helps create buzz and anticipation, and the pre-built page saves you 2-3 hours.</p><p><img src="'+u+'" alt="Waitlist Page"></p><hr><h1 id="time-saved-with-pre-built-pages" tabindex="-1">Time Saved with Pre-built Pages <a class="header-anchor" href="#time-saved-with-pre-built-pages" aria-label="Permalink to &quot;Time Saved with Pre-built Pages&quot;">​</a></h1><p>By using <strong>BoilaPlate</strong>, you save a significant amount of time on setting up the essentials:</p><ul><li><strong>Authentication pages</strong> (Sign In, Register, Forgot/Reset Password) are pre-built with secure and scalable functionality.</li><li><strong>Dashboard</strong> and <strong>Profile</strong> pages are ready for expansion, allowing you to focus on advanced features without worrying about basic user navigation.</li><li><strong>Landing</strong> and <strong>Waitlist</strong> pages help you quickly set up a professional-looking front end.</li></ul><p>In total, you’re saving up to <strong>30-40 hours</strong> of development time by using these pages as part of the <strong>BoilaPlate</strong>.</p>',58)]))}const k=a(h,[["render",c]]);export{_ as __pageData,k as default};
