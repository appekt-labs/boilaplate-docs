import{_ as a,c as i,a0 as e,o as t}from"./chunks/framework.XulkbXWZ.js";const c=JSON.parse('{"title":"Authentication","description":"","frontmatter":{},"headers":[],"relativePath":"authentication.md","filePath":"authentication.md"}'),n={name:"authentication.md"};function o(l,s,h,p,r,d){return t(),i("div",null,s[0]||(s[0]=[e(`<h1 id="authentication" tabindex="-1">Authentication <a class="header-anchor" href="#authentication" aria-label="Permalink to &quot;Authentication&quot;">​</a></h1><p>The boilerplate comes with <strong>NextAuth.js</strong> for handling authentication. It supports both OAuth providers and email/password-based authentication. All authentication-related data is stored in a <strong>MongoDB</strong> database.</p><h2 id="sign-up" tabindex="-1">Sign Up <a class="header-anchor" href="#sign-up" aria-label="Permalink to &quot;Sign Up&quot;">​</a></h2><p>While <strong>NextAuth.js</strong> does not include built-in registration functionality, this boilerplate has an API route for user registration:</p><h3 id="api-route-api-auth-register" tabindex="-1">API Route: <code>/api/auth/register</code> <a class="header-anchor" href="#api-route-api-auth-register" aria-label="Permalink to &quot;API Route: \`/api/auth/register\`&quot;">​</a></h3><p>To register a new user, send a <code>POST</code> request to <code>/api/auth/register</code> with the following fields:</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;John Doe&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;email&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;john@example.com&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;password&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;password123&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Upon successful registration, the user&#39;s data is stored in MongoDB, and an account verification email is sent using <strong>Resend</strong>.</p><h2 id="sign-in" tabindex="-1">Sign In <a class="header-anchor" href="#sign-in" aria-label="Permalink to &quot;Sign In&quot;">​</a></h2><p>Users can sign in using email/password or any connected OAuth provider. NextAuth manages the session and tokens.</p><p>To sign in:</p><ol><li>Navigate to <code>/auth/signin</code>.</li><li>Enter the credentials (email/password or OAuth).</li><li>If the user has not verified their account, they will receive an email verification prompt.</li></ol><h3 id="sign-in-api" tabindex="-1">Sign In API <a class="header-anchor" href="#sign-in-api" aria-label="Permalink to &quot;Sign In API&quot;">​</a></h3><p>You can also directly sign in via the API:</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;email&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;john@example.com&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;password&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;password123&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>A session token is generated and stored for future requests.</p><h2 id="forgot-password" tabindex="-1">Forgot Password <a class="header-anchor" href="#forgot-password" aria-label="Permalink to &quot;Forgot Password&quot;">​</a></h2><p>If a user forgets their password, they can reset it by requesting a password reset link. An email with a reset link will be sent using <strong>Resend</strong>.</p><h3 id="api-route-api-auth-forgot-password" tabindex="-1">API Route: <code>/api/auth/forgot-password</code> <a class="header-anchor" href="#api-route-api-auth-forgot-password" aria-label="Permalink to &quot;API Route: \`/api/auth/forgot-password\`&quot;">​</a></h3><p>To initiate a password reset, send a <code>POST</code> request with the user&#39;s email:</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;email&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;john@example.com&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>The email sent uses a custom template built with <strong>React Email</strong>.</p><h2 id="reset-password" tabindex="-1">Reset Password <a class="header-anchor" href="#reset-password" aria-label="Permalink to &quot;Reset Password&quot;">​</a></h2><p>When the user clicks the reset link from their email, they can create a new password.</p><h3 id="api-route-api-auth-reset-password" tabindex="-1">API Route: <code>/api/auth/reset-password</code> <a class="header-anchor" href="#api-route-api-auth-reset-password" aria-label="Permalink to &quot;API Route: \`/api/auth/reset-password\`&quot;">​</a></h3><p>To reset the password, send a <code>POST</code> request to the <code>/api/auth/reset-password</code> route:</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;token&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;reset-token-from-email&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;newPassword&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;newpassword123&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>If the token is valid, the user&#39;s password is updated in the MongoDB database.</p><h2 id="update-user-details" tabindex="-1">Update User Details <a class="header-anchor" href="#update-user-details" aria-label="Permalink to &quot;Update User Details&quot;">​</a></h2><p>Users can update their profile information such as name, email, and password.</p><h3 id="api-route-api-auth-user-profile" tabindex="-1">API Route: <code>/api/auth/user-profile</code> <a class="header-anchor" href="#api-route-api-auth-user-profile" aria-label="Permalink to &quot;API Route: \`/api/auth/user-profile\`&quot;">​</a></h3><p>To update user details, send a <code>PATCH</code> request to <code>/api/auth/user-profile</code> with the updated data:</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Jane Doe&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;email&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;jane@example.com&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;password&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;newpassword123&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>The MongoDB database is updated accordingly.</p><h2 id="account-verification" tabindex="-1">Account Verification <a class="header-anchor" href="#account-verification" aria-label="Permalink to &quot;Account Verification&quot;">​</a></h2><p>After registration, the user will receive a verification email to confirm their account. This is done via <strong>Resend</strong>, and the email template is built with <strong>React Email</strong>.</p><h3 id="api-route-api-auth-verify" tabindex="-1">API Route: <code>/api/auth/verify</code> <a class="header-anchor" href="#api-route-api-auth-verify" aria-label="Permalink to &quot;API Route: \`/api/auth/verify\`&quot;">​</a></h3><p>To verify the account, the user clicks the link in the verification email. This activates the account, and the user is allowed to sign in.</p><h2 id="email-templates" tabindex="-1">Email Templates <a class="header-anchor" href="#email-templates" aria-label="Permalink to &quot;Email Templates&quot;">​</a></h2><p>All the email templates in this boilerplate are created using <strong>React Email</strong> (<code>@react-email/components</code>), which allows for reusable and responsive components. The templates cover:</p><ul><li><strong>Account verification</strong></li><li><strong>Password reset</strong></li><li><strong>Welcome emails</strong></li></ul><p>These templates can be easily customized to fit your needs.</p><h2 id="oauth-providers" tabindex="-1">OAuth Providers <a class="header-anchor" href="#oauth-providers" aria-label="Permalink to &quot;OAuth Providers&quot;">​</a></h2><p>NextAuth supports multiple OAuth providers, including:</p><ul><li><strong>Google</strong></li><li><strong>GitHub</strong></li><li><strong>Twitter</strong></li></ul><p>To configure OAuth providers, add your credentials to the <code>.env.local</code> file:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">GOOGLE_CLIENT_ID</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">your-google-client-id</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">GOOGLE_CLIENT_SECRET</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">your-google-client-secret</span></span></code></pre></div><h3 id="example-oauth-provider-configuration" tabindex="-1">Example OAuth Provider Configuration <a class="header-anchor" href="#example-oauth-provider-configuration" aria-label="Permalink to &quot;Example OAuth Provider Configuration&quot;">​</a></h3><p>In <code>src/app/api/auth/[...nextauth].ts</code>:</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GoogleProvider </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;next-auth/providers/google&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> authOptions</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  providers: [</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    GoogleProvider</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      clientId: process.env.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">GOOGLE_CLIENT_ID</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      clientSecret: process.env.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">GOOGLE_CLIENT_SECRET</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ],</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="conclusion" tabindex="-1">Conclusion <a class="header-anchor" href="#conclusion" aria-label="Permalink to &quot;Conclusion&quot;">​</a></h2><p>This boilerplate provides a complete authentication solution using <strong>NextAuth.js</strong>, along with custom functionality for user registration, account verification, and password management. Email functionality is powered by <strong>Resend</strong>, with customizable templates built using <strong>React Email</strong>. All user data is securely stored in a <strong>MongoDB</strong> database.</p>`,52)]))}const k=a(n,[["render",o]]);export{c as __pageData,k as default};
